name: Java2Docker Baseimage

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches:
      - 'dev/kilian_21'
  pull_request:
    branches:
      - 'dev/kilian_21'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  # image name for this workflow
  IMAGE_NAME: grappa-backend-base
  SUBDIR: grappa-backendstarter

#defaults:
#  run:
    # sub-directory for this workflow
#    working-directory: grappa-backendstarter


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: Build Maven Project, Docker Image and push it to Registry
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2
        
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
          cache: maven

      - name: Set Release version env variable
        run: |
          echo "RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Build with Maven
        run: |
          #mvn --batch-mode --update-snapshots clean package
          mvn --batch-mode --update-snapshots --projects ${SUBDIR} --also-make clean package

      - name: Collect jar-Files
        env:
          JAR_WITH_DEPS: ${SUBDIR}-${env.RELEASE_VERSION}-jar-with-dependencies.jar
        run: |
          #cp target/*.jar docker/starter/
          #cp target/$JAR_WITH_DEPS docker/starter/grappa-backendstarter.jar
          cp ${SUBDIR}/target/$JAR_WITH_DEPS ${SUBDIR}/docker/starter/grappa-backendstarter.jar

      #login before building, so private baseimage is available
      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build image
        run: |
          cd ${SUBDIR}/docker
          docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Push image
        env:
          IMAGE_TAG: ${{ env.RELEASE_VERSION }}
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          docker tag $IMAGE_NAME $IMAGE_ID:$IMAGE_TAG
          docker tag $IMAGE_NAME $IMAGE_ID:latest
          docker push $IMAGE_ID:$IMAGE_TAG
          docker push $IMAGE_ID:latest
